#!/usr/bin/env bash
#
# Adam Sharp
# Aug 21, 2013
#
# Usage: Add it to your PATH and `git remove-submodule path/to/submodule`.
#
# Does the inverse of `git submodule add`:
#  1) `deinit` the submodule
#  2) Remove the submodule from the index and working directory
#  3) Clean up the .gitmodules file
#

function echo_color() {
    # Some colors:
    # 0-black, 1-red, 3-yellow, 76-green, 26 or 27-blue, 237-grey, 255-white
    local background=''
    local foreground=''

    if [[ $2 != 'no' ]]; then
        background="\033[48;5;${2:-237}m"
    fi

    if [[ $3 != 'no' ]]; then
        foreground="\033[38;5;${3:-255}m"
    fi

    # http://misc.flogisoft.com/bash/tip_colors_and_formatting
    echo -e "${foreground}${background}$1\033[0m";
}

submodule_name=$(echo "$1" | sed 's/\/$//'); shift

if [[ -z $submodule_name ]]; then
    echo_color "Error: You must use one of the following submodule paths:" no 1
    for submodule in  $(git submodule status | sed 's/^ *//g' | cut -d' ' -f2); do
        echo_color "\t$submodule"  no 1
    done
    exit 1

fi

exit_err() {
  [ $# -gt 0 ] && echo_color "fatal: $*" no 1 1>&2
  echo_color "Valid submodules:" no 1
  for submodule in  $(git submodule status | cut -d' ' -f2); do
      echo_color "\t$submodule"  no 1
  done
  exit 1
}

if git submodule status "$submodule_name" >/dev/null 2>&1; then
  git submodule deinit -f "$submodule_name"
  git rm -f "$submodule_name"

  git config -f .gitmodules --remove-section "submodule.$submodule_name"
  if [ -z "$(cat .gitmodules)" ]; then
    git rm -f .gitmodules
  else
    git add .gitmodules
  fi
else
  exit_err "Submodule '$submodule_name' not found"
fi
